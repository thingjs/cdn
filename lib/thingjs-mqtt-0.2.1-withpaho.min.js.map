{"version":3,"file":"thingjs-mqtt-0.2.1-withpaho.min.js","sources":["thingjs-agent-0.2.1/transport/Mqtt.js","mqttws31.js"],"names":["Paho","MQTT","global","decodeMessage","input","pos","startingPos","first","type","messageInfo","digit","remLength","multiplier","length","endPos","wireMessage","WireMessage","MESSAGE_TYPE","CONNACK","connectAcknowledgeFlags","sessionPresent","returnCode","PUBLISH","qos","len","readUint16","topicName","parseUTF8","messageIdentifier","message","Message","subarray","retained","duplicate","destinationName","payloadMessage","PUBACK","PUBREC","PUBREL","PUBCOMP","UNSUBACK","SUBACK","writeUint16","buffer","offset","writeString","utf8Length","stringToUTF8","encodeMBI","number","output","Array","numBytes","UTF8Length","i","charCode","charCodeAt","start","lowCharCode","isNaN","Error","format","ERROR","MALFORMED_UNICODE","utf16","byte1","byte2","MALFORMED_UTF","toString","byte3","byte4","String","fromCharCode","version","CONNECT","SUBSCRIBE","UNSUBSCRIBE","PINGREQ","PINGRESP","DISCONNECT","validate","obj","keys","key","hasOwnProperty","errorStr","INVALID_TYPE","scope","f","apply","arguments","OK","code","text","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","CONNACK_RC",1,2,3,4,5,"error","substitutions","field","indexOf","part1","substring","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","options","this","name","prototype","encode","topicStrLength","destinationNameLength","undefined","mqttVersion","clientId","willMessage","willMessagePayloadBytes","payloadBytes","Uint8Array","byteLength","userName","password","topics","requestedQos","ArrayBuffer","mbi","byteStream","set","connectFlags","cleanSession","keepAliveInterval","Pinger","client","window","_client","_window","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","socket","send","timeout","setTimeout","_disconnected","reset","clearTimeout","cancel","Timeout","timeoutSeconds","action","args","ClientImpl","uri","host","port","path","_localKey","_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","localStorage","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onConnectionLost","onMessageDelivered","onMessageArrived","traceFunction","_connectTimeout","sendPinger","receivePinger","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connect","connectOptionsMasked","_traceMask","uris","_doConnect","subscribe","filter","subscribeOptions","onSuccess","grantedQos","invocationContext","onFailure","errorCode","timeOut","errorMessage","_requires_ack","_schedule_message","unsubscribe","unsubscribeOptions","callback","disconnect","getTraceLog","Date","startTrace","stopTrace","wsurl","useSSL","uriParts","split","join","WebSocket","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","push","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","sequence","setItem","JSON","stringify","value","getItem","parse","x","parseInt","fifo","reverse","pop","_socket_send","messageCount","Object","event","data","messages","_deframeMessages","_handleMessage","byteArray","newData","result","stack","sentMessage","removeItem","receivedMessage","sequencedMessages","msgId","sort","a","b","pubRelMessage","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","wireMmessage","errorText","readyState","close","mqttVersionExplicit","record","slice","call","severity","max","shift","traceObject","masked","traceObjectMasked","attr","Client","match","ipv6AddSBracket","clientIdLength","_getHost","_setHost","_getPort","_setPort","_getPath","_setPath","_getURI","_setURI","_getClientId","_setClientId","_getOnConnectionLost","_setOnConnectionLost","newOnConnectionLost","_getOnMessageDelivered","_setOnMessageDelivered","newOnMessageDelivered","_getOnMessageArrived","_setOnMessageArrived","newOnMessageArrived","_getTrace","_setTrace","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","topic","payload","isConnected",{"end":{"file":"thingjs-mqtt-0.2.1-withpaho.js","comments_before":[],"nlb":false,"endpos":75080,"pos":75076,"col":6,"line":1992,"value":"host","type":"name"},"start":{"file":"thingjs-mqtt-0.2.1-withpaho.js","comments_before":[],"nlb":false,"endpos":75080,"pos":75076,"col":6,"line":1992,"value":"host","type":"name"},"name":"host"},"newHost","newPort","newPath","newClientId","newTraceFunction","newPayload","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","_getPayloadString","_getPayloadBytes","_getDestinationName","_setDestinationName","newDestinationName","_getQos","_setQos","newQos","_getRetained","_setRetained","newRetained","_getDuplicate","_setDuplicate","newDuplicate","payloadString","$thing","usePaho","mqtt","require","agent","setup","cb","$super","reconnectPeriod","isConnecting","actuatorsTotal","topicRefs","pendingSubs","pendingUnsubs","z","self","searchMeta","replace","c","Math","floor","random","$id","charAt","destroy","$cb","getChildren","forEach","child","isAbstract","matchInterface","$owner","removeBehaviour","addBehaviour","doConnect","subTopic","getName","doSubscribe","flow","getFlow","pubTopic","concat","doSendMessage","objs","doUnsubscribe","isActive","doDisconnect","doConnectWithMqtt","on","err","onError","onDisconnect","broker","onConnect","createBuffer","doConnectWithPaho","msg","j","k","end","doReconnect","wake","publish"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2015 Simon Cullen, http://github.com/cullens\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n'use strict';\n\nif (!$thing.usePaho)\n    var mqtt = require('mqtt');\n\n$thing.agent('abstract Mqtt implements Container', {\n\n    setup: function(cb) {\n        this.$super(cb);\n\n        if ($thing.usePaho)\n            this.port = 80;\n        else\n            this.port = 1883;\n\n        this.reconnectPeriod = 1000;\n\n        this.isConnecting = false;\n        this.isConnected = false;\n\n        this.actuatorsTotal = 0;\n\n        this.topicRefs = {};\n        this.pendingSubs = {};\n        this.pendingUnsubs = {};\n\n        var z = -1,\n            self = this\n            ;\n\n        $thing.searchMeta(this, 'host', 'string', function(value) {\n            self.host = value;\n        });\n\n        $thing.searchMeta(this, 'port', 'int', function(value) {\n            self.port = value;\n        });\n\n        $thing.searchMeta(this, 'clientId', 'string', function(value) {\n            self.clientId = value;\n        });\n\n        $thing.searchMeta(this, 'reconnectPeriod', 'int', function(value) {\n            self.reconnectPeriod = value;\n        });\n\n        if (this.host === undefined)\n            throw new Error('Mqtt: Missing @host');\n \n        if (this.clientId === undefined)\n            this.clientId = 'xxxxxxxx-xxxx-4xxz-yzzz-zzzzzzzzzzzz'.replace(\n                /[xyz4-]/g, \n                function(c) {\n                    switch(c) {\n                        case 'x':\n                            return (\n                                Math.floor(Math.random() * 100) % 16\n                            ).toString(16);\n                        case 'y':\n                            return '8';\n                        case 'z':\n                            return self.$id.charAt(++z);\n                        case '-':\n                        case '4':\n                            return c;\n                    }\n                }\n            );\n\n    },\n    \n    destroy: function($cb) {\n        this.getChildren().forEach(function(child) {\n            if (!child.isAbstract())\n                if (child.matchInterface('Sensor') !== undefined ||\n                    child.matchInterface('Actuator') !== undefined\n                )\n                    child.$owner.removeBehaviour(child);\n        });\n\n        $cb();\n    },\n\n    addBehaviour: function() {\n        var doConnect = false,\n            obj = this.$super.apply(this, arguments)\n            ;\n        \n        if (obj !== undefined && !obj.isAbstract()) {\n \n            if (obj.matchInterface('Sensor') !== undefined) {\n                obj.subTopic = obj.getName();\n\n            if (this.topicRefs[obj.subTopic] !== undefined)\n                this.topicRefs[obj.subTopic]++;\n            else {\n                this.topicRefs[obj.subTopic] = 1;\n\n                if (this.isConnected)\n                    this.doSubscribe(obj.subTopic);\n                else {\n                    this.pendingSubs[obj.subTopic] = true;\n\n                    if (this.pendingUnsubs[obj.subTopic] !== undefined)\n                        delete this.pendingUnsubs[obj.subTopic];\n\n                        doConnect = true;\n                    }\n                }\n            }\n                \n            if (obj.matchInterface('Actuator') !== undefined) {\n                var flow = obj.getFlow();\n                \n                obj.pubTopic = obj.getName();\n\n                obj.getFlow = function() {\n                    return flow.concat([\n                        function(message, cb) {\n                            obj.$owner.doSendMessage(obj.pubTopic, message);\n                            cb();\n                        }\n                    ]);\n                };\n\n                if (!this.isConnected) {\n                    doConnect = true;\n                    $thing.agent(obj)('pause')();\n                }\n\n                this.actuatorsTotal++;\n            }\n            \n            if (doConnect)\n                this.doConnect();\n\n        }\n            \n        return obj;\n    },\n\n    removeBehaviour: function() {\n        var self = this,\n            objs = this.$super.apply(this, arguments)\n            ;\n            \n        objs.forEach(function(obj) {\n\n            if (obj.subTopic !== undefined)\n                if (--self.topicRefs[obj.subTopic] <= 0) {\n                    delete self.topicRefs[obj.subTopic];\n\n                    if (self.pendingSubs[obj.subTopic] !== undefined)\n                        delete self.pendingSubs[obj.subTopic];\n\n                    if (self.isConnected)\n                        self.doUnsubscribe(obj.subTopic);\n                    else\n                        self.pendingUnsubs[obj.subTopic] = true;\n                }\n                \n            if (obj.pubTopic !== undefined)\n                self.actuatorsTotal--;\n\n        });\n\n        if (!this.isActive())\n            this.doDisconnect();\n\n        return objs;\n    },\n\n    doConnectWithMqtt: function() {\n        var self = this;\n\n        this.client = mqtt.connect({\n            host: this.host,\n            port: this.port,\n            clientId: this.clientId,\n            reconnectPeriod: this.reconnectPeriod\n        });\n\n        this.client.on('error', function(err) {\n            self.onError(err)();\n        });\n\n        this.client.on('close', function() {\n            self.onDisconnect();\n            self.removeBehaviour(self.broker);\n            delete self.broker;\n        });\n\n        this.client.on('connect', function() {\n            self.broker = self.addBehaviour('@passive', {});\n            self.onConnect();\n        });\n\n        this.client.on('message', function(topic, message) {\n            self.onMessageArrived(\n                topic, \n                $thing.createBuffer(message)\n            );\n        });\n\n    },\n\n    doConnectWithPaho: function() {\n        var self = this;\n\n        this.client = new Paho.MQTT.Client(\n            this.host, \n            this.port, \n            this.clientId\n        );\n\n        this.client.onConnectionLost = function() {\n            self.onDisconnect();\n        };\n                    \n        this.client.onMessageArrived = function(msg) {\n            self.onMessageArrived(\n                msg.destinationName, \n                $thing.createBuffer(msg.payloadBytes)\n            );\n        };\n            \n        this.client.onMessageDelivered = function(msg) {\n            self.onMessageDelivered(\n                msg.destinationName, \n                $thing.createBuffer(msg.payloadBytes)\n            );\n        };\n\n        this.client.connect({\n            onSuccess: function() {\n                self.onConnect();\n            },\n            onFailure: function(err) {\n                self.onError(err);\n            }\n        });\n    },\n\n    isActive: function() {\n        for (var i in this.pendingSubs)\n            break;        \n        for (var j in this.pendingUnsubs)\n            break;\n        for (var k in this.topicRefs)\n            break;\n        if (    i !== undefined || \n                j !== undefined || \n                k !== undefined || \n                this.actuatorsTotal > 0\n        )  \n            return true;\n        else\n            return false;\n    },\n\n    doConnect: function() {\n        if (this.isConnecting) \n            return;\n\n        this.isConnecting = true;\n        this.isConnected = false;\n\n        if ($thing.usePaho)\n            this.doConnectWithPaho();\n        else\n            this.doConnectWithMqtt();\n    },\n\n    doDisconnect: function() {\n        if (this.client !== undefined) {\n\n            this.isConnecting = false;\n            this.isConnected = false;\n\n            if ($thing.usePaho)\n                this.client.disconnect();\n            else\n                this.client.end();\n\n            delete this.client;\n        }\n    },\n\n    doReconnect: function() {\n        if ($thing.usePaho)\n            this.addBehaviour(\n                '@singleton',\n                '@period $', this.reconnectPeriod,\n                'extends Waker', {\n                    wake: function(cb) {\n                        this.$super(cb);\n\n                        if (this.$owner.isConnected)\n                            this.$owner.doDisconnect();\n                        else\n                            this.$owner.doConnect();\n                    }\n                }\n            );\n    },\n\n    doSubscribe: function(topic) {\n        this.client.subscribe(topic);\n    },\n\n    doUnsubscribe: function(topic) {\n        this.client.unsubscribe(topic);\n    },\n\n    doSendMessage: function(topic, message) {\n        var self = this;\n\n        if ($thing.usePaho)\n            this.client.send(topic, message, 0, false);\n        else \n            this.client.publish(\n                topic,\n                message, {\n\n                },\n                function(err) {\n                    if (err) \n                        self.onError(err);\n                    else \n                        self.onMessageDelivered(\n                            topic, \n                            $thing.createBuffer(message)\n                        );\n                }\n            );\n    },\n\n    onError: function(err) {\n        this.isConnecting = false;\n\n        if ($thing.usePaho && err.errorCode === 8)\n            this.onDisconnect();\n    },\n\n    onConnect: function() {\n        this.isConnecting = false;\n        this.isConnected = true;\n\n        for (var i in this.pendingSubs)\n            this.doSubscribe(i);\n\n        for (var j in this.pendingUnsubs)\n            this.doUnsubscribe(j);\n\n        this.pendingSubs = {};\n        this.pendingUnsubs = {};\n\n        for (var k in this.topicRefs)\n            break;\n        if (k === undefined && this.actuatorsTotal <= 0) \n            this.doDisconnect();\n        else\n            this.getChildren().forEach(function(obj) {\n                if (!obj.isAbstract() && \n                    obj.matchInterface('Actuator') !== undefined\n                )       \n                    $thing.agent(obj)('resume')();\n            });\n    },\n\n    onDisconnect: function() {\n        this.isConnecting = false;\n        this.isConnected = false;\n\n        if (this.actuatorsTotal > 0)\n            this.getChildren().forEach(function(obj) {\n                if (obj.matchInterface('Actuator') !== undefined)\n                    $thing.agent(obj)('pause')();\n            });\n\n        if (this.isActive())\n            this.doReconnect();\n    },\n\n    onMessageArrived: function(topic, message) {\n\n        this.getChildren().forEach(function(obj) {\n            if (!obj.isAbstract() && obj.matchInterface(topic) !== undefined)\n                    \n                if (obj.matchInterface('Bridge') !== undefined)\n                    $thing.agent('@select $ not owner:$', topic, obj.$owner.$id)\n                        ('push', message)()\n                        ;\n\n                else if (obj.matchInterface('Sensor') !== undefined)\n                    $thing.agent(obj)\n                        ('push', message)()\n                        ;\n        });\n\n    },\n\n    onMessageDelivered: function(topic, message) {\n\n    }\n\n});","/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution. \n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho.MQTT module\n// only has a single public function, client, which returns\n// a Paho.MQTT client object given connection details.\n \n/**\n * Send and receive messages using web browsers.\n * <p> \n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *  \n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number. \n * <li>Specifying options that relate to the communications link with the server, \n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.MQTT.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.MQTT.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl> \n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n * \n * <code><pre>\nclient = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message); \n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect(); \n};\t\n * </pre></code>\n * @namespace Paho.MQTT \n */\n\nif (typeof Paho === \"undefined\") {\n\tPaho = {};\n}\n\nPaho.MQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module. \n\n\tvar version = \"@VERSION@\";\n\tvar buildLevel = \"@BUILDLEVEL@\";\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar MESSAGE_TYPE = {\n\t\tCONNECT: 1, \n\t\tCONNACK: 2, \n\t\tPUBLISH: 3,\n\t\tPUBACK: 4,\n\t\tPUBREC: 5, \n\t\tPUBREL: 6,\n\t\tPUBCOMP: 7,\n\t\tSUBSCRIBE: 8,\n\t\tSUBACK: 9,\n\t\tUNSUBSCRIBE: 10,\n\t\tUNSUBACK: 11,\n\t\tPINGREQ: 12,\n\t\tPINGRESP: 13,\n\t\tDISCONNECT: 14\n\t};\n\t\n\t// Collection of utility methods used to simplify module code \n\t// and promote the DRY pattern.  \n\n\t/**\n\t * Validate an object's parameter names to ensure they \n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj. \n\t * @throws {Error} Invalid option parameter found. \n\t * @private \n\t */\n\tvar validate = function(obj, keys) {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {       \t\t\n\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t   throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t} else {\t\n\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\tfor (var key in keys)\n\t\t\t\t\t\tif (keys.hasOwnProperty(key))\n\t\t\t\t\t\t\terrorStr = errorStr+\" \"+key;\n\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope. \n\t * @param {function} User function\n\t * @param {object} Function scope  \n\t * @return {function} User function bound to another scope\n\t * @private \n\t */\n\tvar scope = function (f, scope) {\n\t\treturn function () {\n\t\t\treturn f.apply(scope, arguments);\n\t\t};\n\t};\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar ERROR = {\n\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"}, \n\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t};\n\t\n\t/** CONNACK RC Meaning. */\n\tvar CONNACK_RC = {\n\t\t0:\"Connection Accepted\",\n\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t2:\"Connection Refused: identifier rejected\",\n\t\t3:\"Connection Refused: server unavailable\",\n\t\t4:\"Connection Refused: bad user name or password\",\n\t\t5:\"Connection Refused: not authorized\"\n\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR.KEY value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\tvar format = function(error, substitutions) {\n\t\tvar text = error.text;\n\t\tif (substitutions) {\n\t\t  var field,start;\n\t\t  for (var i=0; i<substitutions.length; i++) {\n\t\t\tfield = \"{\"+i+\"}\";\n\t\t\tstart = text.indexOf(field);\n\t\t\tif(start > 0) {\n\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t}\n\t\t  }\n\t\t}\n\t\treturn text;\n\t};\n\t\n\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\t\n\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t * \n\t * Optional properties\n\t * \n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *  \n\t * \"Flag\" properties \n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\tvar WireMessage = function (type, options) { \t\n\t\tthis.type = type;\n\t\tfor (var name in options) {\n\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\tthis[name] = options[name];\n\t\t\t}\n\t\t}\n\t};\n\t\n\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\tvar first = ((this.type & 0x0f) << 4);\n\t\t\n\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\tvar remLength = 0;\n\t\tvar topicStrLength = new Array();\n\t\tvar destinationNameLength = 0;\n\t\t\n\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tremLength += 2;\n\n\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\tvar willMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\t\n\t\t\t\tif (this.password != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\t        \t\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\t   \n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;  \n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\n\t\t// Now we can allocate a buffer for the message\n\n\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t//Write the fixed header into the buffer\n\t\tbyteStream[0] = first;\n\t\tbyteStream.set(mbi,1);\n\n\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\t\t\n\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar connectFlags = 0;\n\t\t\tif (this.cleanSession) \n\t\t\t\tconnectFlags = 0x02;\n\t\t\tif (this.willMessage != undefined ) {\n\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tconnectFlags |= 0x80;\n\t\t\tif (this.password != undefined)\n\t\t\t\tconnectFlags |= 0x40;\n\t\t\tbyteStream[pos++] = connectFlags; \n\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t}\n\n\t\t// Output the messageIdentifier - if there is one\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos); \n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\tif (this.password != undefined) \n\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\t\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\t\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\t\t\t\t\t\n\t\t\t\tbreak;\n\n//    \t    case MESSAGE_TYPE.PUBREC:\t\n//    \t    case MESSAGE_TYPE.PUBREL:\t\n//    \t    case MESSAGE_TYPE.PUBCOMP:\t\n//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\t\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t}\n\n\t\treturn buffer;\n\t}\t\n\n\tfunction decodeMessage(input,pos) {\n\t    var startingPos = pos;\n\t\tvar first = input[pos];\n\t\tvar type = first >> 4;\n\t\tvar messageInfo = first &= 0x0f;\n\t\tpos += 1;\n\t\t\n\n\t\t// Decode the remaining length (MBI format)\n\n\t\tvar digit;\n\t\tvar remLength = 0;\n\t\tvar multiplier = 1;\n\t\tdo {\n\t\t\tif (pos == input.length) {\n\t\t\t    return [null,startingPos];\n\t\t\t}\n\t\t\tdigit = input[pos++];\n\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\tmultiplier *= 128;\n\t\t} while ((digit & 0x80) != 0);\n\t\t\n\t\tvar endPos = pos+remLength;\n\t\tif (endPos > input.length) {\n\t\t    return [null,startingPos];\n\t\t}\n\n\t\tvar wireMessage = new WireMessage(type);\n\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:     \t    \t\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\t\t\t\t\t\t\t\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar message = new Paho.MQTT.Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01) \n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\t    \n\t\t\tcase  MESSAGE_TYPE.PUBREL:    \n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:    \t    \t\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\t\n\t\t\t\tbreak;\n\t\t\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\t\t\t\t\n\t\treturn [wireMessage,endPos];\t\n\t}\n\n\tfunction writeUint16(input, buffer, offset) {\n\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\tbuffer[offset++] = input % 256;     //LSB \n\t\treturn offset;\n\t}\t\n\n\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\tstringToUTF8(input, buffer, offset);\n\t\treturn offset + utf8Length;\n\t}\t\n\n\tfunction readUint16(buffer, offset) {\n\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t}\t\n\n\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private \n\t */\n\tfunction encodeMBI(number) {\n\t\tvar output = new Array(1);\n\t\tvar numBytes = 0;\n\n\t\tdo {\n\t\t\tvar digit = number % 128;\n\t\t\tnumber = number >> 7;\n\t\t\tif (number > 0) {\n\t\t\t\tdigit |= 0x80;\n\t\t\t}\n\t\t\toutput[numBytes++] = digit;\n\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\tfunction UTF8Length(input) {\n\t\tvar output = 0;\n\t\tfor (var i = 0; i<input.length; i++) \n\t\t{\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t   {\n\t\t\t\t\t  // Surrogate pair means its a 4 byte character\n\t\t\t\t\t  if (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  i++;\n\t\t\t\t\t\t  output++;\n\t\t\t\t\t\t}\n\t\t\t\t   output +=3;\n\t\t\t\t   }\n\t\t\telse if (charCode > 0x7F)\n\t\t\t\toutput +=2;\n\t\t\telse\n\t\t\t\toutput++;\n\t\t} \n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\tfunction stringToUTF8(input, output, start) {\n\t\tvar pos = start;\n\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\n\t\t\t// Check for a surrogate pair.\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t}\n\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (charCode <= 0x7F) {\n\t\t\t\toutput[pos++] = charCode;\n\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t} else if (charCode <= 0xFFFF) {    \t\t\t\t    \n\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;   \n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;   \n\t\t\t} else {\n\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t};\n\t\t} \n\t\treturn output;\n\t}\n\t\n\tfunction parseUTF8(input, offset, length) {\n\t\tvar output = \"\";\n\t\tvar utf16;\n\t\tvar pos = offset;\n\n\t\twhile (pos < offset+length)\n\t\t{\n\t\t\tvar byte1 = input[pos++];\n\t\t\tif (byte1 < 128)\n\t\t\t\tutf16 = byte1;\n\t\t\telse \n\t\t\t{\n\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\tif (byte2 < 0) \n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\telse \n\t\t\t\t{ \n\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\tif (byte3 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t   var byte4 = input[pos++]-128;\n\t\t\t\t\t\t\t\t   if (byte4 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t   if (byte1 < 0xF8)        // 4 byte character \n\t\t\t\t\t\t\t\t\t\t   utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t   else                     // longer encodings are not supported  \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}  \n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t  {\n\t\t\t\t\t utf16 -= 0x10000;\n\t\t\t\t\t output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\t utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t  }\n\t\t\toutput += String.fromCharCode(utf16);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/** \n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\tvar Pinger = function(client, window, keepAliveInterval) { \n\t\tthis._client = client;        \t\n\t\tthis._window = window;\n\t\tthis._keepAliveInterval = keepAliveInterval*1000;     \t\n\t\tthis.isReset = false;\n\t\t\n\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode(); \n\t\t\n\t\tvar doTimeout = function (pinger) {\n\t\t\treturn function () {\n\t\t\t\treturn doPing.apply(pinger);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/** @ignore */\n\t\tvar doPing = function() { \n\t\t\tif (!this.isReset) {\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t} else {\n\t\t\t\tthis.isReset = false;\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\tthis._client.socket.send(pingReq); \n\t\t\t\tthis.timeout = this._window.setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t}\n\t\t}\n\n\t\tthis.reset = function() {\n\t\t\tthis.isReset = true;\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t}\n\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t }; \n\n\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\tvar Timeout = function(client, window, timeoutSeconds, action, args) {\n\t\tthis._window = window;\n\t\tif (!timeoutSeconds)\n\t\t\ttimeoutSeconds = 30;\n\t\t\n\t\tvar doTimeout = function (action, client, args) {\n\t\t\treturn function () {\n\t\t\t\treturn action.apply(client, args);\n\t\t\t};\n\t\t};\n\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\t\t\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t}; \n\t\n\t/*\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t * \n\t * @name Paho.MQTT.ClientImpl @constructor \n\t * @param {String} host the DNS nameof the webSocket host. \n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\tif (!(\"WebSocket\" in global && global[\"WebSocket\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t}\n\t\tif (!(\"localStorage\" in global && global[\"localStorage\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"localStorage\"]));\n\t\t}\n\t\tif (!(\"ArrayBuffer\" in global && global[\"ArrayBuffer\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t}\n\t\tthis._trace(\"Paho.MQTT.Client\", uri, host, port, path, clientId);\n\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t\tthis.path = path;\n\t\tthis.uri = uri;\n\t\tthis.clientId = clientId;\n\n\t\t// Local storagekeys are qualified with the following string.\n\t\t// The conditional inclusion of path in the key is for backward\n\t\t// compatibility to when the path was not configurable and assumed to\n\t\t// be /mqtt\n\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t// Create private instance-only message queue\n\t\t// Internal queue of messages to be sent, in sending order. \n\t\tthis._msg_queue = [];\n\n\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids. \n\t\tthis._sentMessages = {};\n\n\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t// indexed by their respective message ids. \n\t\tthis._receivedMessages = {};\n\n\t\t// Internal list of callbacks to be executed when messages\n\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\tthis._notify_msg_sent = {};\n\n\t\t// Unique identifier for SEND messages, incrementing\n\t\t// counter as messages are sent.\n\t\tthis._message_identifier = 1;\n\t\t\n\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\tthis._sequence = 0;\n\t\t\n\n\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.   \t\n\t\tfor (var key in localStorage)\n\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) == 0  \t\t    \n\t\t\t\t|| key.indexOf(\"Received:\"+this._localKey) == 0)\n\t\t\tthis.restore(key);\n\t};\n\n\t// Messaging Client public instance members. \n\tClientImpl.prototype.host;\n\tClientImpl.prototype.port;\n\tClientImpl.prototype.path;\n\tClientImpl.prototype.uri;\n\tClientImpl.prototype.clientId;\n\n\t// Messaging Client private instance members.\n\tClientImpl.prototype.socket;\n\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\tClientImpl.prototype.connected = false;\n\t/* The largest message identifier allowed, may not be larger than 2**16 but \n\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t */ \n\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\tClientImpl.prototype.connectOptions;\n\tClientImpl.prototype.hostIndex;\n\tClientImpl.prototype.onConnectionLost;\n\tClientImpl.prototype.onMessageDelivered;\n\tClientImpl.prototype.onMessageArrived;\n\tClientImpl.prototype.traceFunction;\n\tClientImpl.prototype._msg_queue = null;\n\tClientImpl.prototype._connectTimeout;\n\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\tClientImpl.prototype.sendPinger = null;\n\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\tClientImpl.prototype.receivePinger = null;\n\t\n\tClientImpl.prototype.receiveBuffer = null;\n\t\n\tClientImpl.prototype._traceBuffer = null;\n\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\tClientImpl.prototype.connect = function (connectOptions) {\n\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\"); \n\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\t\t\n\t\tif (this.connected) \n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\tif (this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\n\t\tthis.connectOptions = connectOptions;\n\t\t\n\t\tif (connectOptions.uris) {\n\t\t\tthis.hostIndex = 0;\n\t\t\tthis._doConnect(connectOptions.uris[0]);  \n\t\t} else {\n\t\t\tthis._doConnect(this.uri);  \t\t\n\t\t}\n\t\t\n\t};\n\n\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\t\t\t  \n\t\tif (!this.connected)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n\t\twireMessage.topics=[filter];\n\t\tif (subscribeOptions.qos != undefined)\n\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\n\t\telse \n\t\t\twireMessage.requestedQos = [0];\n\t\t\n\t\tif (subscribeOptions.onSuccess) {\n\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t}\n\n\t\tif (subscribeOptions.onFailure) {\n\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode});};\n\t\t}\n\n\t\tif (subscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, subscribeOptions.timeout, subscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:subscribeOptions.invocationContext, \n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code, \n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t\t\n\t\t// All subscriptions return a SUBACK. \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {  \n\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\t\t\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n\t\twireMessage.topics = [filter];\n\t\t\n\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t}\n\t\tif (unsubscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, unsubscribeOptions.timeout, unsubscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t \n\t\t// All unsubscribes return a SUBACK.         \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t \n\tClientImpl.prototype.send = function (message) {\n\t\tthis._trace(\"Client.send\", message);\n\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\twireMessage.payloadMessage = message;\n\t\t\n\t\tif (message.qos > 0)\n\t\t\tthis._requires_ack(wireMessage);\n\t\telse if (this.onMessageDelivered)\n\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.disconnect = function () {\n\t\tthis._trace(\"Client.disconnect\");\n\n\t\tif (!this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t// in case of a failure later on in the disconnect processing.\n\t\t// as a consequence, the _disconected call back may be run several times.\n\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.getTraceLog = function () {\n\t\tif ( this._traceBuffer !== null ) {\n\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\tfor (var key in this._sentMessages)\n\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\t\t\t\n\t\t\treturn this._traceBuffer;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype.startTrace = function () {\n\t\tif ( this._traceBuffer === null ) {\n\t\t\tthis._traceBuffer = [];\n\t\t}\n\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t};\n\t\n\tClientImpl.prototype.stopTrace = function () {\n\t\tdelete this._traceBuffer;\n\t};\n\n\tClientImpl.prototype._doConnect = function (wsurl) { \t        \n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters. \n\t\tif (this.connectOptions.useSSL) {\n\t\t    var uriParts = wsurl.split(\":\");\n\t\t    uriParts[0] = \"wss\";\n\t\t    wsurl = uriParts.join(\":\");\n\t\t}\n\t\tthis.connected = false;\n\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t} else {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t}\n\t\tthis.socket.binaryType = 'arraybuffer';\n\t\t\n\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\t\t\n\t\tthis.sendPinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\tthis.receivePinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\t\n\t\tthis._connectTimeout = new Timeout(this, window, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t};\n\n\t\n\t// Schedule a new message to be sent over the WebSockets\n\t// connection. CONNECT messages cause WebSocket connection\n\t// to be started. All other messages are queued internally\n\t// until this has happened. When WS connection starts, process\n\t// all outstanding messages. \n\tClientImpl.prototype._schedule_message = function (message) {\n\t\tthis._msg_queue.push(message);\n\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK. \n\t\tif (this.connected) {\n\t\t\tthis._process_queue();\n\t\t}\n\t};\n\n\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\t\t\n\t\tswitch(wireMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  if(wireMessage.pubRecReceived)\n\t\t\t\t  storedMessage.pubRecReceived = true;\n\t\t\t  \n\t\t\t  // Convert the payload to a hex string.\n\t\t\t  storedMessage.payloadMessage = {};\n\t\t\t  var hex = \"\";\n\t\t\t  var messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t  for (var i=0; i<messageBytes.length; i++) {\n\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t  hex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\telse \n\t\t\t\t  hex = hex+messageBytes[i].toString(16);\n\t\t\t  }\n\t\t\t  storedMessage.payloadMessage.payloadHex = hex;\n\t\t\t  \n\t\t\t  storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t  storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t  if (wireMessage.payloadMessage.duplicate) \n\t\t\t\t  storedMessage.payloadMessage.duplicate = true;\n\t\t\t  if (wireMessage.payloadMessage.retained) \n\t\t\t\t  storedMessage.payloadMessage.retained = true;\t   \n\t\t\t  \n\t\t\t  // Add a sequence number to sent messages.\n\t\t\t  if ( prefix.indexOf(\"Sent:\") == 0 ) {\n\t\t\t\t  if ( wireMessage.sequence === undefined )\n\t\t\t\t\t  wireMessage.sequence = ++this._sequence;\n\t\t\t\t  storedMessage.sequence = wireMessage.sequence;\n\t\t\t  }\n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, storedMessage]));\n\t\t}\n\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t};\n\t\n\tClientImpl.prototype.restore = function(key) {    \t\n\t\tvar value = localStorage.getItem(key);\n\t\tvar storedMessage = JSON.parse(value);\n\t\t\n\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\t\t\n\t\tswitch(storedMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  // Replace the payload message with a Message object.\n\t\t\t  var hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t  var buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t  var byteStream = new Uint8Array(buffer); \n\t\t\t  var i = 0;\n\t\t\t  while (hex.length >= 2) { \n\t\t\t\t  var x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t  hex = hex.substring(2, hex.length);\n\t\t\t\t  byteStream[i++] = x;\n\t\t\t  }\n\t\t\t  var payloadMessage = new Paho.MQTT.Message(byteStream);\n\t\t\t  \n\t\t\t  payloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t  payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t  if (storedMessage.payloadMessage.duplicate) \n\t\t\t\t  payloadMessage.duplicate = true;\n\t\t\t  if (storedMessage.payloadMessage.retained) \n\t\t\t\t  payloadMessage.retained = true;\t \n\t\t\t  wireMessage.payloadMessage = payloadMessage;\n\t\t\t  \n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t  throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t}\n\t\t\t\t\t\t\t\n\t\tif (key.indexOf(\"Sent:\"+this._localKey) == 0) {\n\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;    \t\t    \n\t\t} else if (key.indexOf(\"Received:\"+this._localKey) == 0) {\n\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype._process_queue = function () {\n\t\tvar message = null;\n\t\t// Process messages in order they were added\n\t\tvar fifo = this._msg_queue.reverse();\n\n\t\t// Send all queued messages down socket connection\n\t\twhile ((message = fifo.pop())) {\n\t\t\tthis._socket_send(message);\n\t\t\t// Notify listeners that message was successfully sent\n\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\tthis._message_identifier++;\n\t\t}\n\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t}\n\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\tthis._message_identifier = 1;\n\t\t}\n\t};\n\n\t/** \n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_open = function () {      \n\t\t// Create the CONNECT message object.\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions); \n\t\twireMessage.clientId = this.clientId;\n\t\tthis._socket_send(wireMessage);\n\t};\n\n\t/** \n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_message = function (event) {\n\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t// Reset the receive ping timer, we now have evidence the server is alive.\n\t\tthis.receivePinger.reset();\n\t\tvar messages = this._deframeMessages(event.data);\n\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t    this._handleMessage(messages[i]);\n\t\t}\n\t}\n\t\n\tClientImpl.prototype._deframeMessages = function(data) {\n\t\tvar byteArray = new Uint8Array(data);\n\t    if (this.receiveBuffer) {\n\t        var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t        newData.set(this.receiveBuffer);\n\t        newData.set(byteArray,this.receiveBuffer.length);\n\t        byteArray = newData;\n\t        delete this.receiveBuffer;\n\t    }\n\t\ttry {\n\t\t    var offset = 0;\n\t\t    var messages = [];\n\t\t    while(offset < byteArray.length) {\n\t\t        var result = decodeMessage(byteArray,offset);\n\t\t        var wireMessage = result[0];\n\t\t        offset = result[1];\n\t\t        if (wireMessage !== null) {\n\t\t            messages.push(wireMessage);\n\t\t        } else {\n\t\t            break;\n\t\t        }\n\t\t    }\n\t\t    if (offset < byteArray.length) {\n\t\t    \tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t    }\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t\treturn messages;\n\t}\n\t\n\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\t\t\n\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\ttry {\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\n\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\tfor (var key in this._sentMessages) {\t    \t\t\n\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t}\n\t\t\t\t// Client connected and ready for business.\n\t\t\t\tif (wireMessage.returnCode === 0) {\n\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\t\t\t\t} else {\n\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Resend messages.\n\t\t\t\tvar sequencedMessages = new Array();\n\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t}\n\t\t  \n\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t}\n\n\t\t\t\t// Process all queued messages now that the connection is established. \n\t\t\t\tthis._process_queue();\n\t\t\t\tbreak;\n\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\tif (receivedMessage) {\n\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubCompMessage);                    \n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBCOMP: \n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\twireMessage.returnCode.indexOf = Array.prototype.indexOf;\n\t\t\t\t\tif (wireMessage.returnCode.indexOf(0x80) !== -1) {\n\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t} \n\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) { \n\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\tthis.sendPinger.reset();\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_error = function (error) {\n\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_close = function () {\n\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._socket_send = function (wireMessage) {\n\t\t\n\t\tif (wireMessage.type == 1) {\n\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\"); \n\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t}\n\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\t\t\n\t\tthis.socket.send(wireMessage.encode());\n\t\t/* We have proved to the server we are alive. */\n\t\tthis.sendPinger.reset();\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\"+wireMmessage.payloadMessage.qos);\n\t\t};\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\tif (this.onMessageArrived) {\n\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t}\n\t};\n\n\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\t\t\n\t\tthis.sendPinger.cancel();\n\t\tthis.receivePinger.cancel();\n\t\tif (this._connectTimeout)\n\t\t\tthis._connectTimeout.cancel();\n\t\t// Clear message buffers.\n\t\tthis._msg_queue = [];\n\t\tthis._notify_msg_sent = {};\n\t   \n\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\tthis.socket.onopen = null;\n\t\t\tthis.socket.onmessage = null;\n\t\t\tthis.socket.onerror = null;\n\t\t\tthis.socket.onclose = null;\n\t\t\tif (this.socket.readyState === 1)\n\t\t\t\tthis.socket.close();\n\t\t\tdelete this.socket;           \n\t\t}\n\t\t\n\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\tthis.hostIndex++;\n\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\n\t\t} else {\n\t\t\n\t\t\tif (errorCode === undefined) {\n\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t}\n\t\t\t\n\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\tif (this.connected) {\n\t\t\t\tthis.connected = false;\n\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.       \n\t\t\t\tif (this.onConnectionLost)\n\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText});      \t\n\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\")\n\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);  \n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t}\t\n\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\tif (this.traceFunction) {\n\t\t\tfor (var i in arguments)\n\t\t\t{\t\n\t\t\t\tif (typeof arguments[i] !== \"undefined\")\n\t\t\t\t\targuments[i] = JSON.stringify(arguments[i]);\n\t\t\t}\n\t\t\tvar record = Array.prototype.slice.call(arguments).join(\"\");\n\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t}\n\n\t\t//buffer style trace\n\t\tif ( this._traceBuffer !== null ) {  \n\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {    \n\t\t\t\t\tthis._traceBuffer.shift();              \n\t\t\t\t}\n\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t   };\n\t\t};\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\tvar traceObjectMasked = {};\n\t\tfor (var attr in traceObject) {\n\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\tif (attr == masked) \n\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\telse\n\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t} \n\t\t}\n\t\treturn traceObjectMasked;\n\t};\n\n\t// ------------------------------------------------------------------------\n\t// Public Programming interface.\n\t// ------------------------------------------------------------------------\n\t\n\t/** \n\t * The JavaScript application communicates to the server using a {@link Paho.MQTT.Client} object. \n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish. \n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods \n\t * (even though the underlying protocol exchange might be synchronous in nature). \n\t * This means they signal their completion by calling back to the application, \n\t * via Success or Failure callback functions provided by the application on the method in question. \n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime \n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>, \n\t * that are defined on the {@link Paho.MQTT.Client} object.  \n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client. \n\t *\n\t * @name Paho.MQTT.Client    \n\t * \n\t * @constructor\n\t *  \n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t * \n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost. \n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network \n\t *                            cause the client to be disconnected. The disconnect call back may be called without \n\t *                            the connectionComplete call back being invoked if, for example the client fails to \n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>   \n\t *                            <li>errorCode\n\t *                            <li>errorMessage       \n\t *                            </ol>\n\t * @property {function} onMessageDelivered called when a message has been delivered. \n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked. \n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Paho.MQTT.Message} that was delivered.\n\t *                            </ol>    \n\t * @property {function} onMessageArrived called when a message has arrived in this Paho.MQTT.client. \n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Paho.MQTT.Message} that has arrived.\n\t *                            </ol>    \n\t */\n\tvar Client = function (host, port, path, clientId) {\n\t    \n\t    var uri;\n\t    \n\t\tif (typeof host !== \"string\")\n\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\t    \n\t    if (arguments.length == 2) {\n\t        // host: must be full ws:// uri\n\t        // port: clientId\n\t        clientId = port;\n\t        uri = host;\n\t        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t        if (match) {\n\t            host = match[4]||match[2];\n\t            port = parseInt(match[7]);\n\t            path = match[8];\n\t        } else {\n\t            throw new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t        }\n\t    } else {\n\t        if (arguments.length == 3) {\n\t\t\t\tclientId = path;\n\t\t\t\tpath = \"/mqtt\";\n\t\t\t}\n\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\tif (typeof path !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\t\t\t\n\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") != -1 && host.slice(0,1) != \"[\" && host.slice(-1) != \"]\");\n\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t}\n\n\t\tvar clientIdLength = 0;\n\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\tvar charCode = clientId.charCodeAt(i);                   \n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {    \t\t\t\n\t\t\t\t i++; // Surrogate pair.\n\t\t\t}   \t\t   \n\t\t\tclientIdLength++;\n\t\t}     \t   \t\n\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"])); \n\t\t\n\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\t\tthis._getHost =  function() { return host; };\n\t\tthis._setHost = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\t\n\t\tthis._getPort = function() { return port; };\n\t\tthis._setPort = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getPath = function() { return path; };\n\t\tthis._setPath = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getURI = function() { return uri; };\n\t\tthis._setURI = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getClientId = function() { return client.clientId; };\n\t\tthis._setClientId = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getOnConnectionLost = function() { return client.onConnectionLost; };\n\t\tthis._setOnConnectionLost = function(newOnConnectionLost) { \n\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t};\n\n\t\tthis._getOnMessageDelivered = function() { return client.onMessageDelivered; };\n\t\tthis._setOnMessageDelivered = function(newOnMessageDelivered) { \n\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t};\n\t   \n\t\tthis._getOnMessageArrived = function() { return client.onMessageArrived; };\n\t\tthis._setOnMessageArrived = function(newOnMessageArrived) { \n\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t};\n\n\t\tthis._getTrace = function() { return client.traceFunction; };\n\t\tthis._setTrace = function(trace) {\n\t\t\tif(typeof trace === \"function\"){\n\t\t\t\tclient.traceFunction = trace;\n\t\t\t}else{\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t}\n\t\t};\n\t\t\n\t\t/** \n\t\t * Connect this Messaging client to its server. \n\t\t * \n\t\t * @name Paho.MQTT.Client#connect\n\t\t * @function\n\t\t * @param {Object} connectOptions - attributes used with the connection. \n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this \n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.MQTT.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {Number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server \n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement \n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.       \n\t\t * </ol>\n\t\t * @config {function} [onFailure] called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.       \n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.      \n\t\t * </ol>\n\t\t * @config {Array} [hosts] If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://example.com:1883/mqtt), that are tried in order in place \n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t\t * @config {Array} [ports] If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t\t * @throws {InvalidState} if the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\tthis.connect = function (connectOptions) {\n\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\t\t\t\t\t   userName:\"string\", \n\t\t\t\t\t\t\t\t\t   password:\"string\", \n\t\t\t\t\t\t\t\t\t   willMessage:\"object\", \n\t\t\t\t\t\t\t\t\t   keepAliveInterval:\"number\", \n\t\t\t\t\t\t\t\t\t   cleanSession:\"boolean\", \n\t\t\t\t\t\t\t\t\t   useSSL:\"boolean\",\n\t\t\t\t\t\t\t\t\t   invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t   hosts:\"object\",\n\t\t\t\t\t\t\t\t\t   ports:\"object\",\n\t\t\t\t\t\t\t\t\t   mqttVersion:\"number\"});\n\t\t\t\n\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t}\n\n\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t} else {\n\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t}\n\n\t\t\t//Check that if password is set, so is username\n\t\t\tif (connectOptions.password === undefined && connectOptions.userName !== undefined)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]))\n\n\t\t\tif (connectOptions.willMessage) {\n\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\tconnectOptions.willMessage.stringPayload;\n\t\t\t\t\n\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t}\n\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\tif (connectOptions.hosts) {\n\t\t\t    \n\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\n\t\t\t\tvar usingURIs = false;\n\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!usingURIs) {\n\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (connectOptions.hosts.length != connectOptions.ports.length)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\n\t\t\t\t\tconnectOptions.uris = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\n\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tclient.connect(connectOptions);\n\t\t};\n\t \n\t\t/** \n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t * \n\t\t * @name Paho.MQTT.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maiximum qos of any publications sent \n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.       \n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.       \n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.      \n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.         \n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\tvalidate(subscribeOptions,  {qos:\"number\", \n\t\t\t\t\t\t\t\t\t\t invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" \n\t\t\t\t&& !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t * \n\t\t * @name Paho.MQTT.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t                                      or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the \n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.     \n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.       \n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.      \n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t   timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t  });\n\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t * \n\t\t * @name Paho.MQTT.Client#send\n\t\t * @function \n\t\t * @param {string|Paho.MQTT.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent. \n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.MQTT.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent. \n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.     \n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered \n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \n\t\t *                     A received message has the retained boolean set to true if the message was published \n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published. \n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */   \n\t\tthis.send = function (topic,payload,qos,retained) {   \n\t\t\tvar message ;  \n\t\t\t\n\t\t\tif(arguments.length == 0){\n\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\tmessage = topic;\n\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\tclient.send(message); \n\n\t\t\t}else {\n\t\t\t\t//parameter checking in Message object \n\t\t\t\tmessage = new Message(payload);\n\t\t\t\tmessage.destinationName = topic;\n\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\tmessage.qos = qos;\n\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\tmessage.retained = retained;\n\t\t\t\tclient.send(message); \n\t\t\t}\n\t\t};\n\t\t\n\t\t/** \n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t * \n\t\t * @name Paho.MQTT.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.     \n\t\t */\n\t\tthis.disconnect = function () {\n\t\t\tclient.disconnect();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Get the contents of the trace log.\n\t\t * \n\t\t * @name Paho.MQTT.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\tthis.getTraceLog = function () {\n\t\t\treturn client.getTraceLog();\n\t\t}\n\t\t\n\t\t/** \n\t\t * Start tracing.\n\t\t * \n\t\t * @name Paho.MQTT.Client#startTrace\n\t\t * @function\n\t\t */\n\t\tthis.startTrace = function () {\n\t\t\tclient.startTrace();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Stop tracing.\n\t\t * \n\t\t * @name Paho.MQTT.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\tthis.stopTrace = function () {\n\t\t\tclient.stopTrace();\n\t\t};\n\n\t\tthis.isConnected = function() {\n\t\t\treturn client.connected;\n\t\t};\n\t};\n\n\tClient.prototype = {\n\t\tget host() { return this._getHost(); },\n\t\tset host(newHost) { this._setHost(newHost); },\n\t\t\t\n\t\tget port() { return this._getPort(); },\n\t\tset port(newPort) { this._setPort(newPort); },\n\n\t\tget path() { return this._getPath(); },\n\t\tset path(newPath) { this._setPath(newPath); },\n\t\t\t\n\t\tget clientId() { return this._getClientId(); },\n\t\tset clientId(newClientId) { this._setClientId(newClientId); },\n\n\t\tget onConnectionLost() { return this._getOnConnectionLost(); },\n\t\tset onConnectionLost(newOnConnectionLost) { this._setOnConnectionLost(newOnConnectionLost); },\n\n\t\tget onMessageDelivered() { return this._getOnMessageDelivered(); },\n\t\tset onMessageDelivered(newOnMessageDelivered) { this._setOnMessageDelivered(newOnMessageDelivered); },\n\t\t\n\t\tget onMessageArrived() { return this._getOnMessageArrived(); },\n\t\tset onMessageArrived(newOnMessageArrived) { this._setOnMessageArrived(newOnMessageArrived); },\n\n\t\tget trace() { return this._getTrace(); },\n\t\tset trace(newTraceFunction) { this._setTrace(newTraceFunction); }\t\n\n\t};\n\t\n\t/** \n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t * \n\t * @name Paho.MQTT.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.     \n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered \n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \n\t *                     A received message has the retained boolean set to true if the message was published \n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published. \n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received. \n\t *                     This is only set on messages received from the server.\n\t *                     \n\t */\n\tvar Message = function (newPayload) {  \n\t\tvar payload;\n\t\tif (   typeof newPayload === \"string\" \n\t\t\t|| newPayload instanceof ArrayBuffer\n\t\t\t|| newPayload instanceof Int8Array\n\t\t\t|| newPayload instanceof Uint8Array\n\t\t\t|| newPayload instanceof Int16Array\n\t\t\t|| newPayload instanceof Uint16Array\n\t\t\t|| newPayload instanceof Int32Array\n\t\t\t|| newPayload instanceof Uint32Array\n\t\t\t|| newPayload instanceof Float32Array\n\t\t\t|| newPayload instanceof Float64Array\n\t\t   ) {\n\t\t\tpayload = newPayload;\n\t\t} else {\n\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t}\n\n\t\tthis._getPayloadString = function () {\n\t\t\tif (typeof payload === \"string\")\n\t\t\t\treturn payload;\n\t\t\telse\n\t\t\t\treturn parseUTF8(payload, 0, payload.length); \n\t\t};\n\n\t\tthis._getPayloadBytes = function() {\n\t\t\tif (typeof payload === \"string\") {\n\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\tvar byteStream = new Uint8Array(buffer); \n\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\treturn byteStream;\n\t\t\t} else {\n\t\t\t\treturn payload;\n\t\t\t};\n\t\t};\n\n\t\tvar destinationName = undefined;\n\t\tthis._getDestinationName = function() { return destinationName; };\n\t\tthis._setDestinationName = function(newDestinationName) { \n\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\tdestinationName = newDestinationName;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t};\n\t\t\t\t\n\t\tvar qos = 0;\n\t\tthis._getQos = function() { return qos; };\n\t\tthis._setQos = function(newQos) { \n\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\tqos = newQos;\n\t\t\telse \n\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t};\n\n\t\tvar retained = false;\n\t\tthis._getRetained = function() { return retained; };\n\t\tthis._setRetained = function(newRetained) { \n\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\tretained = newRetained;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t};\n\t\t\n\t\tvar duplicate = false;\n\t\tthis._getDuplicate = function() { return duplicate; };\n\t\tthis._setDuplicate = function(newDuplicate) { duplicate = newDuplicate; };\n\t};\n\t\n\tMessage.prototype = {\n\t\tget payloadString() { return this._getPayloadString(); },\n\t\tget payloadBytes() { return this._getPayloadBytes(); },\n\t\t\n\t\tget destinationName() { return this._getDestinationName(); },\n\t\tset destinationName(newDestinationName) { this._setDestinationName(newDestinationName); },\n\t\t\n\t\tget qos() { return this._getQos(); },\n\t\tset qos(newQos) { this._setQos(newQos); },\n\n\t\tget retained() { return this._getRetained(); },\n\t\tset retained(newRetained) { this._setRetained(newRetained); },\n\n\t\tget duplicate() { return this._getDuplicate(); },\n\t\tset duplicate(newDuplicate) { this._setDuplicate(newDuplicate); }\n\t};\n\t   \n\t// Module contents.\n\treturn {\n\t\tClient: Client,\n\t\tMessage: Message\n\t};\n})(window);"]}